/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2004                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      createBafflesDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Sample for creating baffles:
// - usually converting internal faces into two boundary faces
// - or converting boundary faces into a boundary face
//   (internalFacesOnly=false)(though should use really createPatch
//    to do this)
//
// - selection of faces (and orientation) to 'baffle' through:
//      faceZone:
//          type        faceZone;
//          zoneName    f0;
//      searchableSurface:
//          type        searchableSurface;
//          surface     triSurfaceMesh;
//          name        baffle1D.stl;
//
// - specification of patches for baffle sides in one of two modes:
//      - patchPairs : create two patches of same type, same input
//      - patches    : create patches separately, full control over what
//                     to create on what side
//                     (this mode can also create duplicate (overlapping)
//                      sets of baffles:
//                      - internalFacesOnly = false
//                      - have 4 entries in patches:
//                          - master
//                          - slave
//                          - additional master
//                          - additional slave)

// Whether to convert internal faces only (so leave boundary faces intact).
// This is only relevant if your face selection type can pick up boundary
// faces.
internalFacesOnly true;

// Optionally do not read/convert/write any fields.
//noFields true;

// Baffles to create.
baffles
{
    cyclicFaces
    {
        //- Select faces and orientation through a searchableSurface
        type        faceZone;
        zoneName    intFaceZone;

        // Generate patches explicitly
        patches
        {
            master
            {
                //- Master side patch

                name            fan_half0;
                type            cyclic;
                neighbourPatch  fan_half1;

                patchFields
                {
                    pa
                    {
                        type            adjointPressureJump;
                        jump            uniform 0;
                        value           uniform 0;
                        patchType       cyclic;
                    }
                    Ua
                    {
                        type            adjointVelocityJump;
                        jump            uniform (0 0 0);
                        value           uniform (0 0 0);
                        patchType       cyclic;
                    }
                }
            }
            slave
            {
                //- Slave side patch

                name            fan_half1;
                type            cyclic;
                neighbourPatch  fan_half0;

                patchFields
                {
                    pa
                    {
                        type            adjointPressureJump;
                        jump            uniform 0;
                        value           uniform 0;
                        patchType       cyclic;
                    }
                    Ua
                    {
                        type            adjointVelocityJump;
                        jump            uniform (0 0 0);
                        value           uniform (0 0 0);
                        patchType       cyclic;
                    }
                }
            }
        }
    }
}
// ************************************************************************* //
